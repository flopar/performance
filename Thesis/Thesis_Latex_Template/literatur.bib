@INPROCEEDINGS{8389562,
  author={Sneha, Karuturi and Malle, Gowda M},
  booktitle={2017 International Conference on Energy, Communication, Data Analytics and Soft Computing (ICECDS)},
  title={Research on software testing techniques and software automation testing tools},
  year={2017},
  volume={},
  number={},
  pages={77-81},
  doi={10.1109/ICECDS.2017.8389562}
}

@misc{GMI,
  Author={Preeti Wadhwani, Shubhangi Yadav},
  year=2021,
  month=Sep,
  title={{Software Market Insights} Software Testing Market},
  howpublished={\url{https://www.gminsights.com/industry-analysis/software-testing-market}},
  note={Accessed: 2021-11-06}
}

@INPROCEEDINGS{8822082,  
  author={Valle-G{\'{o}}mez, Kevin J. and Delgado-P{\'{e}}rez, Pedro and Medina-Bulo, Inmaculada and Magallanes-Fern{\'{a}}ndez, Jos{\'{e}}}, 
  booktitle={2019 IEEE/ACM 14th International Workshop on Automation of Software Test (AST)},   
  title={Software Testing: Cost Reduction in Industry 4.0},   
  year={2019},  
  volume={},  
  number={},  
  pages={69-70},  
  doi={10.1109/AST.2019.00018}
}

@inproceedings{10.1145/1807128.1807153,
  author = {Candea, George and Bucur, Stefan and Zamfir, Cristian},
  title = {Automated Software Testing as a Service},
  year = {2010},
  isbn = {9781450300360},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi-org.ezproxy.hs-augsburg.de/10.1145/1807128.1807153},
  doi = {10.1145/1807128.1807153},
  abstract = {This paper makes the case for TaaS--automated software testing as a cloud-based service.
We present three kinds of TaaS: a "programmer's sidekick" enabling developers to thoroughly
and promptly test their code with minimal upfront resource investment; a "home edition"
on-demand testing service for consumers to verify the software they are about to install
on their PC or mobile device; and a public "certification service," akin to Underwriters
Labs, that independently assesses the reliability, safety, and security of software.TaaS
automatically tests software, without human involvement from the service user's or
provider's side. This is unlike today's "testing as a service" businesses, which employ
humans to write tests. Our goal is to take recently proposed techniques for automated
testing--even if usable only on to y programs--and make them practical by modifying
them to harness the resources of compute clouds. Preliminary work suggests it is technically
feasible to do so, and we find that TaaS is also compelling from a social and business
point of view.},
  booktitle = {Proceedings of the 1st ACM Symposium on Cloud Computing},
  pages = {155-160},
  numpages = {6},
  keywords = {taas, symbolic execution, automated testing, software reliability, testing-as-a-service},
  location = {Indianapolis, Indiana, USA},
  series = {SoCC '10}
}

@InProceedings{10.1007/978-981-10-8848-3_46,
author="Bhatia, Vasundhara
and Singhal, Abhishek
and Bansal, Abhay
and Prabhakar, Neha",
editor="Hoda, M. N.
and Chauhan, Naresh
and Quadri, S. M. K.
and Srivastava, Praveen Ranjan",
title="A Review of Software Testing Approaches in Object-Oriented and Aspect-Oriented Systems",
booktitle="Software Engineering",
year="2019",
publisher="Springer Singapore",
address="Singapore",
pages="487--496",
abstract="Software testing is considered to be a very important phase in the development of any software. It becomes crucial to inculcate appropriate software testing techniques in every software development life cycle. Object-oriented software development has been in use for a while now. Aspect-oriented approach which is comparatively new and works on the basics of object-oriented approach. But aspect-oriented approach also aims to provide modularity, higher cohesion, and separation of concerns. In this paper, we have reviewed the various testing techniques that are developed for both object-oriented and aspect-oriented systems.",
isbn="978-981-10-8848-3"
}

@article{10.1145/1010773.1010774,
author = {Miller, Edward F.},
title = {Some Statistics from the Software Testing Service},
year = {1979},
issue_date = {January 1979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {1},
issn = {0163-5948},
url = {https://doi-org.ezproxy.hs-augsburg.de/10.1145/1010773.1010774},
doi = {10.1145/1010773.1010774},
journal = {SIGSOFT Softw. Eng. Notes},
month = jan,
pages = {8-11},
numpages = {4}
}

@inproceedings{10.1145/1596473.1596475,
author = {Bertolino, Antonia},
title = {Approaches to Testing Service-Oriented Software Systems},
year = {2009},
isbn = {9781605587097},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.ezproxy.hs-augsburg.de/10.1145/1596473.1596475},
doi = {10.1145/1596473.1596475},
abstract = {The attractiveness and popularity of Service-Oriented Software Systems (SOSSs) stem
from the growing availability of independent services that can be cost-effectively
composed with other services to dynamically provide richer functionality. Service-orientation
however poses new and difficult challenges to testers, especially when it comes to
testing the interactions between heterogeneous, loosely coupled and independently
developed services. Service integration testing requires discipline, standardized
processes, and agreed policies to be put in place, which we referred to as SOA (Service
Oriented Architecture) Test Governance (STG). Discovered services usually provide
just a syntactical interface, enabling some general black-box tests, but insufficient
to develop an adequate understanding of the integration quality between the interacting
services. Besides, testing for the functional and extra-functional properties of a
composite SOSS cannot generally rely on the ready or full availability, for testing
purposes, of all invoked services (e.g., their usage might bring unwanted side effects).
In this talk we will survey some of our recent results on SOSSs testing that span
over the above needs. We will first discuss how the STG concept is implicit behind
any approach to testing composite SOSSs and then give an overview of three different,
complementary SOSS test approaches realizing different grades of STG, namely: the
state-of-practice prototype tool WS-TAXI, for fully automatic generation of black-box
test inputs; the novel SOCT approach allowing for test coverage measurement of independent
services without loosing their implementation neutrality; the PUPPET tool for model-based
generation of a testbed simulating the functional and extra-functional behavior of
invoked external services.},
booktitle = {Proceedings of the 1st International Workshop on Quality of Service-Oriented Software Systems},
pages = {1â€“2},
numpages = {2},
keywords = {black-box and white-box testing of web services, testing of qos, service-level agreement, service-oriented architecture, soa test governance},
location = {Amsterdam, The Netherlands},
series = {QUASOSS '09}
}
@INPROCEEDINGS{6724273,  
  author={Anand, Vishal and Saxena, Deepanker},  
  booktitle={2013 IEEE International Conference on Computational Intelligence and Computing Research},   
  title={Comparative study of modern web browsers based on their performance and evolution},   
  year={2013},  
  volume={},  
  number={},  
  pages={1-5},  
  doi={10.1109/ICCIC.2013.6724273}
}

@misc{CppRef,
  title={{Cpp Reference} List of C++ Standard Library headers},
  howpublished={\url{https://en.cppreference.com/w/cpp/header}},
  note={Accessed: 2021-11-06}
}

@misc{GitLab,
  title={GitLab},
  howpublished={\url{https://about.gitlab.com/}},
  note={Accessed: 2021-11-09}
}

@misc{Jenkins,
  title={Jenkins},
  howpublished={\url{https://www.jenkins.io/}},
  note={Accessed: 2021-11-09}
}
